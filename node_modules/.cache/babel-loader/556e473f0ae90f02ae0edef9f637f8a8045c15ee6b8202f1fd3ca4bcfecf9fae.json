{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Documents\\\\FUNBUG\\\\websiteLearning\\\\client\\\\src\\\\Page\\\\UploadPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// export function UploadPage() {\n//   const [selectedFiles, setSelectedFiles] = useState(null);\n//   const navigate = useNavigate()\n\n//   const handleFileChange = (event) => {\n//     const files = event.target.files;\n\n//     for (let i = 0; i < files.length; ++i) {\n//       const file = files[i]\n//       if (!file.name.endsWith('.mp3') && !file.name.endsWith('.wav')) {\n//         alert(\"ONLY .mp3 or .wav files ARE ALLOWED!\")\n//         event.target.value = null;\n//         setSelectedFiles(null);\n//         return;\n//       }\n//     }\n//     setSelectedFiles(files);\n\n//   };\n\n//   const handleUpload = async (event) => {\n\n//     event.preventDefault();\n//     if (setSelectedFiles.length === 0)\n//       {\n//         alert(\"please select files and upload!\")\n//         return;\n//       } \n\n//     const formData = new FormData();\n//     Array.from(selectedFiles).forEach(file => {\n//         formData.append(\"files\", file);    \n//     });\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/upload\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (response.ok) {\n//         alert(\"all the files have been upload and processing!\")\n//         console.log(\"File uploaded successfully!\");\n\n//       } else {\n//         console.error(\"File upload failed.\");\n//       }\n//     } catch (error) {\n//       return <div>\n//         <h1>WARNING: THERE IS NO FILE FOR UPLOAD!</h1>  \n//       </div>\n//       console.error(\"Error uploading file:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleUpload}>\n//         <input type=\"file\" id=\"fileInput\" multiple onChange={handleFileChange} />\n//         <button type=\"submit\">Upload</button>\n//       </form>\n//       {selectedFiles && <p>Selected file: {selectedFiles.name}</p>}\n//       <a href=\"http://localhost:3000/DownloadPage\">WARNING: AFTER UPLOAD YOUR FILE, CLICK TO UPLOAD AND GO TO DOWNLOAD PAGE WITH THIS LINK</a>\n//     </div>\n//   );\n// }\n\n// export default UploadPage\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UploadPage() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const navigate = useNavigate();\n  const handleFileChange = event => {\n    const files = event.target.files;\n\n    // Check if selected files are mp3 or wav\n    for (let i = 0; i < files.length; ++i) {\n      const file = files[i];\n      if (!file.name.endsWith('.mp3') && !file.name.endsWith('.wav')) {\n        alert(\"ONLY .mp3 or .wav files ARE ALLOWED!\");\n        event.target.value = null; // Clear the input\n        setSelectedFiles([]);\n        return;\n      }\n    }\n    setSelectedFiles(files);\n  };\n  const handleUpload = async event => {\n    event.preventDefault();\n    if (selectedFiles.length === 0) {\n      alert(\"Please select files and upload!\");\n      return;\n    }\n    const formData = new FormData();\n    Array.from(selectedFiles).forEach(file => {\n      formData.append(\"files\", file);\n    });\n    try {\n      const response = await fetch(\"http://localhost:5000/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (response.ok) {\n        alert(\"All the files have been uploaded and are being processed!\");\n        console.log(\"File uploaded successfully!\");\n        // Navigate to download page or handle response as needed\n        navigate(\"/downloadPage\");\n      } else {\n        console.error(\"File upload failed.\");\n        alert(\"File upload failed.\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      alert(\"Error uploading file.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        multiple: true,\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), selectedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected files: \", Array.from(selectedFiles).map(file => file.name).join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"http://localhost:3000/DownloadPage\",\n      children: \"WARNING: AFTER UPLOAD YOUR FILE, CLICK TO UPLOAD AND GO TO DOWNLOAD PAGE WITH THIS LINK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadPage, \"+p90GL9hX4a/+moorncXb1ehB+k=\", false, function () {\n  return [useNavigate];\n});\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","UploadPage","_s","selectedFiles","setSelectedFiles","navigate","handleFileChange","event","files","target","i","length","file","name","endsWith","alert","value","handleUpload","preventDefault","formData","FormData","Array","from","forEach","append","response","fetch","method","body","ok","console","log","error","children","onSubmit","type","id","multiple","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","join","href","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Documents/FUNBUG/websiteLearning/client/src/Page/UploadPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// export function UploadPage() {\r\n//   const [selectedFiles, setSelectedFiles] = useState(null);\r\n//   const navigate = useNavigate()\r\n  \r\n//   const handleFileChange = (event) => {\r\n//     const files = event.target.files;\r\n    \r\n//     for (let i = 0; i < files.length; ++i) {\r\n//       const file = files[i]\r\n//       if (!file.name.endsWith('.mp3') && !file.name.endsWith('.wav')) {\r\n//         alert(\"ONLY .mp3 or .wav files ARE ALLOWED!\")\r\n//         event.target.value = null;\r\n//         setSelectedFiles(null);\r\n//         return;\r\n//       }\r\n//     }\r\n//     setSelectedFiles(files);\r\n    \r\n//   };\r\n\r\n//   const handleUpload = async (event) => {\r\n    \r\n//     event.preventDefault();\r\n//     if (setSelectedFiles.length === 0)\r\n//       {\r\n//         alert(\"please select files and upload!\")\r\n//         return;\r\n//       } \r\n\r\n//     const formData = new FormData();\r\n//     Array.from(selectedFiles).forEach(file => {\r\n//         formData.append(\"files\", file);    \r\n//     });\r\n    \r\n\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/upload\", {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         alert(\"all the files have been upload and processing!\")\r\n//         console.log(\"File uploaded successfully!\");\r\n        \r\n//       } else {\r\n//         console.error(\"File upload failed.\");\r\n//       }\r\n//     } catch (error) {\r\n//       return <div>\r\n//         <h1>WARNING: THERE IS NO FILE FOR UPLOAD!</h1>  \r\n//       </div>\r\n//       console.error(\"Error uploading file:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleUpload}>\r\n//         <input type=\"file\" id=\"fileInput\" multiple onChange={handleFileChange} />\r\n//         <button type=\"submit\">Upload</button>\r\n//       </form>\r\n//       {selectedFiles && <p>Selected file: {selectedFiles.name}</p>}\r\n//       <a href=\"http://localhost:3000/DownloadPage\">WARNING: AFTER UPLOAD YOUR FILE, CLICK TO UPLOAD AND GO TO DOWNLOAD PAGE WITH THIS LINK</a>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default UploadPage\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport function UploadPage() {\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const navigate = useNavigate();\r\n  \r\n  const handleFileChange = (event) => {\r\n    const files = event.target.files;\r\n    \r\n    // Check if selected files are mp3 or wav\r\n    for (let i = 0; i < files.length; ++i) {\r\n      const file = files[i];\r\n      if (!file.name.endsWith('.mp3') && !file.name.endsWith('.wav')) {\r\n        alert(\"ONLY .mp3 or .wav files ARE ALLOWED!\");\r\n        event.target.value = null; // Clear the input\r\n        setSelectedFiles([]);\r\n        return;\r\n      }\r\n    }\r\n    setSelectedFiles(files);\r\n  };\r\n\r\n  const handleUpload = async (event) => {\r\n    event.preventDefault();\r\n    \r\n    if (selectedFiles.length === 0) {\r\n      alert(\"Please select files and upload!\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    Array.from(selectedFiles).forEach(file => {\r\n      formData.append(\"files\", file);    \r\n    });\r\n    \r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"All the files have been uploaded and are being processed!\");\r\n        console.log(\"File uploaded successfully!\");\r\n        // Navigate to download page or handle response as needed\r\n        navigate(\"/downloadPage\");\r\n      } else {\r\n        console.error(\"File upload failed.\");\r\n        alert(\"File upload failed.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      alert(\"Error uploading file.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleUpload}>\r\n        <input type=\"file\" id=\"fileInput\" multiple onChange={handleFileChange} />\r\n        <button type=\"submit\">Upload</button>\r\n      </form>\r\n      {selectedFiles.length > 0 && (\r\n        <p>Selected files: {Array.from(selectedFiles).map(file => file.name).join(', ')}</p>\r\n      )}\r\n      <a href=\"http://localhost:3000/DownloadPage\">WARNING: AFTER UPLOAD YOUR FILE, CLICK TO UPLOAD AND GO TO DOWNLOAD PAGE WITH THIS LINK</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadPage;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAMQ,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;;IAEhC;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MACrC,MAAME,IAAI,GAAGJ,KAAK,CAACE,CAAC,CAAC;MACrB,IAAI,CAACE,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAACF,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC9DC,KAAK,CAAC,sCAAsC,CAAC;QAC7CR,KAAK,CAACE,MAAM,CAACO,KAAK,GAAG,IAAI,CAAC,CAAC;QAC3BZ,gBAAgB,CAAC,EAAE,CAAC;QACpB;MACF;IACF;IACAA,gBAAgB,CAACI,KAAK,CAAC;EACzB,CAAC;EAED,MAAMS,YAAY,GAAG,MAAOV,KAAK,IAAK;IACpCA,KAAK,CAACW,cAAc,CAAC,CAAC;IAEtB,IAAIf,aAAa,CAACQ,MAAM,KAAK,CAAC,EAAE;MAC9BI,KAAK,CAAC,iCAAiC,CAAC;MACxC;IACF;IAEA,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BC,KAAK,CAACC,IAAI,CAACnB,aAAa,CAAC,CAACoB,OAAO,CAACX,IAAI,IAAI;MACxCO,QAAQ,CAACK,MAAM,CAAC,OAAO,EAAEZ,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAET;MACR,CAAC,CAAC;MAEF,IAAIM,QAAQ,CAACI,EAAE,EAAE;QACfd,KAAK,CAAC,2DAA2D,CAAC;QAClEe,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C;QACA1B,QAAQ,CAAC,eAAe,CAAC;MAC3B,CAAC,MAAM;QACLyB,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAC;QACpCjB,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CjB,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;EAED,oBACEf,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAMkC,QAAQ,EAAEjB,YAAa;MAAAgB,QAAA,gBAC3BjC,OAAA;QAAOmC,IAAI,EAAC,MAAM;QAACC,EAAE,EAAC,WAAW;QAACC,QAAQ;QAACC,QAAQ,EAAEhC;MAAiB;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzE1C,OAAA;QAAQmC,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAM;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EACNvC,aAAa,CAACQ,MAAM,GAAG,CAAC,iBACvBX,OAAA;MAAAiC,QAAA,GAAG,kBAAgB,EAACZ,KAAK,CAACC,IAAI,CAACnB,aAAa,CAAC,CAACwC,GAAG,CAAC/B,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CACpF,eACD1C,OAAA;MAAG6C,IAAI,EAAC,oCAAoC;MAAAZ,QAAA,EAAC;IAAuF;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrI,CAAC;AAEV;AAACxC,EAAA,CAlEeD,UAAU;EAAA,QAEPH,WAAW;AAAA;AAAAgD,EAAA,GAFd7C,UAAU;AAoE1B,eAAeA,UAAU;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}